!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("text-rpg-engine",[],t):"object"==typeof exports?exports["text-rpg-engine"]=t():e["text-rpg-engine"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=t}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"addItems",value:function(e){return this.items=this.items.concat(e),this.items=[].concat(o(new Set(this.items))),this.items}},{key:"dropItems",value:function(e){var t=this.items.filter(function(t){return!e.includes(t)});return console.log("NEW ITEMS: ",t),this.items=t,this.items}},{key:"checkForItem",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]}},{key:"transferItem",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.keywords=n.map(function(e){return e.toLowerCase()}),this.results=o,this.itemRequirements=i,this.show=r,this.showIfLackingRequirements=s}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,[{key:"matchKeywords",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=!1,o=[];return this.itemRequirements.length>0&&this.itemRequirements.forEach(function(e){var n=!1;t.forEach(function(t){t===e&&(n=!0)}),n||o.push(e)}),this.keywords.forEach(function(t){e.trim().includes(t.trim().toLowerCase())&&(n=!0)}),n?o.length>0?{fail:{missing:o,failText:this.results.failText}}:{success:this.results}:null}},{key:"matchRequirements",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=[];return this.itemRequirements.length>0&&this.itemRequirements.forEach(function(n){var o=!1;e.forEach(function(e){e===n&&(o=!0)}),o||t.push(n)}),!(t.length>0)}}]),e}();t.default=i,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){return e&&e.__esModule?e:{default:e}}(n(1));function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var r=function(){function e(t,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"default",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[],a=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=(arguments.length>7&&void 0!==arguments[7]&&arguments[7],arguments.length>8&&void 0!==arguments[8]&&arguments[8],arguments.length>9&&void 0!==arguments[9]?arguments[9]:"room_templates/");!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.getText=n,this.type=o,this.isPrivate=a,this.templatesDir=u,this.scripts=i;var l=this;this.prompts=[],r.forEach(function(e){l.addPrompt(e.name,e.keywords,e.results,e.itemRequirements,e.show,e.showIfLackingRequirements)}),this.itemRequirements=s}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"makeFromRoomTemplate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null!==t&&(t=this.templatesDir)}},{key:"addPrompt",value:function(e,t,n,i,r,s){var a=new o.default(e,t,n,i,r,s);return this.prompts.push(a),this.prompts}},{key:"enter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t="",n=!0;return this.itemRequirements>0?0===e.length?(n=!1,this.itemRequirements.forEach(function(e){t+="".concat(e.failText,". ")})):(this.itemRequirements.forEach(function(e){var o=!1;this.items.forEach(function(t){t===e&&(o=!0)}),!1===o&&(n=!1,t+=e.failText)}),!0===n&&(t=this.getText)):t=this.getText,[t,n]}},{key:"loadRoomScripts",value:function(){this.scripts.forEach(function(e){var t=document.createElement("script");t.setAttribute("src",e),t.setAttribute("type","application/javascript"),t.setAttribute("defer","defer"),t.setAttribute("async","true"),t.onload=function(){},document.body.appendChild(t)})}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){return e&&e.__esModule?e:{default:e}}(n(0));function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new o.default,i=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments[3]),r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];arguments.length>5&&void 0!==arguments[5]&&arguments[5];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,""===this.name&&(this.name="player"),this.inventory=n,""===this.currentRoom&&(this.currentRoom=this.startRoom),this.startRoom=i,this.parentRooms=r,this.inSubRoom=!1}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"getName",value:function(){return this.name}},{key:"setName",value:function(e){this.name=e}},{key:"enterRoom",value:function(e){var t=e.enter(this.inventory.items);return!1===t[1]||(this.currentRoom=e.name),[t[0],t[1]]}},{key:"getItem",value:function(e){return this.inventory.addItem(e),this.inventory}},{key:"dropItem",value:function(e){return this.inventory.dropItem(e),this.inventory}},{key:"getState",value:function(e){}},{key:"saveState",value:function(e){}},{key:"connectWallet",value:function(){}},{key:"disconnectWallet",value:function(){}},{key:"getInventory",value:function(){return this.inventory}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"input";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.disabled=t,this.value=n,this.elementId=o}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,[{key:"enable",value:function(){this.disabled=!1,document.getElementById("input").disabled=!1}},{key:"disable",value:function(){this.disabled=!0,document.getElementById("input").disabled=!0}},{key:"send",value:function(e){e=e.toLowerCase(),this.value=e}}]),e}();t.default=i,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"display",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"prompts",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"inventory",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"inventoryList",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"prompt",a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"prompt-revealed",u=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"inventoryItem";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.html=t,this.elementId=n,this.promptContainerId=o,this.promptContainerClass=s,this.promptContainerRevealedClass=a,this.inventoryContainerId=i,this.inventoryListId=r,this.itemContainerClass=u}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,[{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null===e?document.getElementById(this.elementId).innerHTML=this.html:(document.getElementById(this.elementId).innerHTML=e,this.html=e)}},{key:"showPrompts",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.promptContainerId,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.promptContainerClass,o=document.getElementById(t);o.replaceChildren(),e.length>=1&&e.forEach(function(e){var t=document.createElement("p");if(t.classList.add(n),t.textContent=e.name,"show"in e==!0){e.show&&o.appendChild(t)}else{if("revealed"in t)if(!0===t.revealed){var i=document.createElement("p");i.textContent=e.name,o.append(i)}else o.appendChild(t);o.appendChild(t)}})}},{key:"showInventory",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.inventoryContainerId,n=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.inventoryListId,arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.itemContainerClass),o=document.getElementById(t);(o.replaceChildren(),e.length>=1)?(document.getElementById("inventoryList").innerHTML="Inventory",e.forEach(function(e){var t=document.createElement("li");t.classList.add(n),t.textContent=e,o.appendChild(t)})):document.getElementById("inventoryList").innerHTML=""}},{key:"append",value:function(e){var t=document.createElement("div");t.innerHTML=e,document.getElementById(this.elementId).append(t)}},{key:"appendToParent",value:function(e){document.getElementById(this.elementId).parentElement.insertAdjacentHTML("afterend",e)}},{key:"clear",value:function(){document.getElementById(this.elementId).innerHTML=""}}]),e}();t.default=i,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=u(n(5)),i=u(n(4)),r=u(n(3)),s=u(n(2)),a=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],o=!0,i=!1,r=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(e){i=!0,r=e}finally{try{o||null==a.return||a.return()}finally{if(i)throw r}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]?arguments[2]:""),s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Display=new o.default,this.Input=new i.default,this.rooms=[];var a=this;t.forEach(function(e){a.addRoom(e.name,e.getText,e.type,e.prompts,e.itemRequirements)}),this.startRoom=n,this.endRoom=s,""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name),this.Player=new r.default(n=this.startRoom)}return function(e,t,n){t&&h(e.prototype,t),n&&h(e,n)}(e,[{key:"init",value:function(){var e;""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name);for(var t=0;t<this.rooms.length;t++)if(this.rooms[t].name===this.Player.currentRoom){e=this.rooms[t].getText,this.rooms[t].loadRoomScripts();break}void 0===e&&(e="No room text found."),this.refreshDisplay(e)}},{key:"loadData",value:function(e){var t=this;e.game.rooms.forEach(function(e){var n=[],o=[],i=[],r="default";void 0!==e.prompts&&(n=e.prompts),void 0!==e.itemRequirements&&(o=e.itemRequirements),void 0!==e.scripts&&(i=e.scripts),void 0!==e.type&&(r=e.type),t.addRoom(e.name,e.getText,r,i,n,o)}),void 0!==e.startRoom&&(this.startRoom=e.startRoom,this.Player.startRoom=e.startRoom),void 0!==e.endRoom&&(this.endRoom=e.endRoom),""!==this.startRoom&&void 0!==this.startRoom||this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""!==this.endRoom&&void 0!==this.endRoom||this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name)}},{key:"savePlayerState",value:function(e){}},{key:"loadPlayerState",value:function(e){}},{key:"addRoom",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"default",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[],a=new s.default(e,t,n,o,i,r);return this.rooms.push(a),a}},{key:"dropRoom",value:function(e){var t=this.rooms.filter(function(t){return t.name!==e});return this.rooms=t,this.rooms}},{key:"getRoom",value:function(e){return this.rooms.find(function(t){return t.name===e})}},{key:"userSend",value:function(e){this.Input.send(e),this.decidePath(this.Input.value)}},{key:"refreshDisplay",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null!==t&&this.Display.show(t);var n=[];this.getRoom(this.Player.currentRoom).prompts.forEach(function(t){"showIfLackingRequirements"in t?!0===t.showIfLackingRequirements?n.push(t):!0===t.matchRequirements(e.Player.inventory.items)&&(t.revealed=!0,n.push(t)):!0===t.matchRequirements(e.Player.items)&&n.push(t)}),this.Display.showPrompts(n),this.Display.showInventory(this.Player.inventory.items),this.getRoom(this.Player.currentRoom).loadRoomScripts(),document.querySelectorAll(".prompt").forEach(function(t){return t.addEventListener("click",function(t){e.userSend(t.currentTarget.innerText)})})}},{key:"decidePath",value:function(e){"restart"===e&&this.resetGame();var t=this,n=t.getRoom(t.Player.currentRoom);if(void 0!==c(n.prompts)){var o=!1;n.prompts.forEach(function(n){try{if(!1===o){var i=n.matchKeywords(e,t.Player.inventory.items);if(null!==i){if(o=!0,"success"in i&&(void 0!==i.success.itemsGiven&&t.Player.inventory.addItems(i.success.itemsGiven),void 0!==i.success.itemsRemoved&&t.Player.inventory.dropItems(i.success.itemsRemoved),void 0!==i.success.roomToEnter)){var r,s,a=l(t.Player.enterRoom(t.getRoom(i.success.roomToEnter)),2);s=a[0],r=a[1],t.Display.clear(),t.getRoom(t.Player.currentRoom).type,t.Display.append("".concat(s)),void 0!==i.success.successText&&t.Display.append("<p class='successText'>".concat(i.success.successText,"</p>")),r&&i.success.roomToEnter===t.endRoom&&t.win()}if("fail"in i)return t.Display.clear(),t.Display.append("".concat(t.getRoom(t.Player.currentRoom).getText)),void 0!==i.fail.failText&&t.Display.append("<p class='failText'>".concat(i.fail.failText,"</p>")),void t.Display.append("<p class='missingItems'>Missing required items: \n                  ".concat(i.fail.missing.toString(),".\n                </p>"))}}}catch(e){console.log(e)}!1===o&&t.Display.show("".concat(t.getRoom(t.Player.currentRoom).getText,"\n                              <p class='failText'>No actions could be done from: \"").concat(e,"\". Try something else, or be\n                              more specific about what you're doing.</p>\n                              "))})}else t.Display.show("<p>".concat(t.getRoom(t.Player.currentRoom).getText," \n      </p> <p class='failText'>There doesn't seem to be any actions at all that you can do in this room.</p>\n      "));this.refreshDisplay()}},{key:"disableInput",value:function(){this.Input.disable()}},{key:"enableInput",value:function(){this.Input.enable()}},{key:"win",value:function(){for(var e=0;e<this.rooms.length;e++)if(this.rooms[e].name===this.endRoom){this.Display.append("<p>Game end.</p>");break}this.disableInput()}},{key:"resetGame",value:function(){this.Player.inventory=new a.default,this.Player.currentRoom=this.startRoom;var e=this.getRoom(this.startRoom);this.Display.show(e.getText),this.Input.enable()}}]),e}();t.default=d,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=new(function(e){return e&&e.__esModule?e:{default:e}}(n(6)).default);t.default=o,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3RleHQtcnBnLWVuZ2luZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvaW52ZW50b3J5LmpzIiwid2VicGFjazovL3RleHQtcnBnLWVuZ2luZS8uL3NyYy9wcm9tcHQuanMiLCJ3ZWJwYWNrOi8vdGV4dC1ycGctZW5naW5lLy4vc3JjL3Jvb20uanMiLCJ3ZWJwYWNrOi8vdGV4dC1ycGctZW5naW5lLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvaW5wdXQuanMiLCJ3ZWJwYWNrOi8vdGV4dC1ycGctZW5naW5lLy4vc3JjL2Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vdGV4dC1ycGctZW5naW5lLy4vc3JjL2dhbWUuanMiLCJ3ZWJwYWNrOi8vdGV4dC1ycGctZW5naW5lLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkludmVudG9yeSIsIml0ZW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiU2V0IiwibmV3SW52ZW50b3J5IiwiZmlsdGVyIiwiaXRlbSIsImluY2x1ZGVzIiwiY29uc29sZSIsImxvZyIsIml0ZW1OYW1lIiwiUHJvbXB0Iiwia2V5d29yZHMiLCJyZXN1bHRzIiwiaXRlbVJlcXVpcmVtZW50cyIsInNob3ciLCJzaG93SWZMYWNraW5nUmVxdWlyZW1lbnRzIiwibWFwIiwidiIsInRvTG93ZXJDYXNlIiwibWVzc2FnZSIsImZvdW5kS2V5d29yZCIsIm1pc3NpbmdSZXF1aXJlbWVudHMiLCJmb3JFYWNoIiwicmVxdWlyZW1lbnQiLCJmb3VuZFJlcXVpcmVtZW50IiwicHVzaCIsImtleXdvcmQiLCJ0cmltIiwiZmFpbCIsIm1pc3NpbmciLCJmYWlsVGV4dCIsInN1Y2Nlc3MiLCJfcHJvbXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIlJvb20iLCJnZXRUZXh0IiwidHlwZSIsInNjcmlwdHMiLCJwcm9tcHRzIiwiaXNQcml2YXRlIiwidGVtcGxhdGVzRGlyIiwiX3RoaXMiLCJwcm9tcHQiLCJhZGRQcm9tcHQiLCJ0ZW1wbGF0ZU5hbWUiLCJyZXF1aXJlbWVudHMiLCJkZWZhdWx0IiwicmVzdWx0VGV4dCIsIm1ldEFsbFJlcXVpcmVtZW50cyIsImZvdW5kIiwic2NyaXB0VXJsIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwib25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiX2ludmVudG9yeSIsIlBsYXllciIsImludmVudG9yeSIsInN0YXJ0Um9vbSIsInBhcmVudFJvb21zIiwiY3VycmVudFJvb20iLCJpblN1YlJvb20iLCJyb29tIiwicm9vbVJlc3VsdCIsImVudGVyIiwiYWRkSXRlbSIsImRyb3BJdGVtIiwiY29uZmlnIiwiSW5wdXQiLCJkaXNhYmxlZCIsImVsZW1lbnRJZCIsImdldEVsZW1lbnRCeUlkIiwiRGlzcGxheSIsImh0bWwiLCJwcm9tcHRDb250YWluZXJJZCIsImludmVudG9yeUNvbnRhaW5lcklkIiwiaW52ZW50b3J5TGlzdElkIiwicHJvbXB0Q29udGFpbmVyQ2xhc3MiLCJwcm9tcHRDb250YWluZXJSZXZlYWxlZENsYXNzIiwiaXRlbUNvbnRhaW5lckNsYXNzIiwiaW5uZXJIVE1MIiwiY29udGFpbmVyIiwicmVwbGFjZUNoaWxkcmVuIiwiZWxlbWVudCIsImVsIiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJyZXZlYWxlZCIsImVsUmV2ZWFsZWQiLCJhcHBlbmQiLCJub2RlIiwicGFyZW50RWxlbWVudCIsImluc2VydEFkamFjZW50SFRNTCIsIl9kaXNwbGF5IiwiX2lucHV0IiwiX3BsYXllciIsIl9yb29tIiwiR2FtZSIsInJvb21zIiwiZW5kUm9vbSIsImFkZFJvb20iLCJkaXNwbGF5VGV4dCIsImxvYWRSb29tU2NyaXB0cyIsInJlZnJlc2hEaXNwbGF5IiwiZ2FtZURhdGEiLCJnYW1lIiwicm9vbVByb21wdHMiLCJyb29tUmVxdWlyZW1lbnRzIiwicm9vbVNjcmlwdHMiLCJyb29tVHlwZSIsInJvb21PYmoiLCJyb29tTmFtZSIsIm5ld1Jvb21zIiwiZmluZCIsIngiLCJzZW5kIiwiZGVjaWRlUGF0aCIsIl90aGlzMiIsInByb21wdHNUb1Nob3ciLCJnZXRSb29tIiwibWF0Y2hSZXF1aXJlbWVudHMiLCJzaG93UHJvbXB0cyIsInNob3dJbnZlbnRvcnkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ1c2VyU2VuZCIsImN1cnJlbnRUYXJnZXQiLCJpbm5lclRleHQiLCJyZXNldEdhbWUiLCJjdXJyUm9vbSIsIl90eXBlb2YiLCJmb3VuZFByb21wdCIsIm1hdGNoaW5nUHJvbXB0UmVzdWx0cyIsIm1hdGNoS2V5d29yZHMiLCJpdGVtc0dpdmVuIiwiYWRkSXRlbXMiLCJpdGVtc1JlbW92ZWQiLCJkcm9wSXRlbXMiLCJyb29tVG9FbnRlciIsImVudGVyUm9vbVJlc3VsdFN1Y2Nlc3MiLCJlbnRlclJvb21SZXN1bHRUZXh0IiwiX3RoaXMkUGxheWVyJGVudGVyUm9vMiIsIl9zbGljZWRUb0FycmF5IiwiZW50ZXJSb29tIiwiY2xlYXIiLCJzdWNjZXNzVGV4dCIsIndpbiIsInRvU3RyaW5nIiwiZXJyIiwiZGlzYWJsZSIsImVuYWJsZSIsImRpc2FibGVJbnB1dCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsZUFBQUMsSUFDQUQsT0FBQSxxQkFBQUgsR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxtQkFBQUQsSUFFQUQsRUFBQSxtQkFBQUMsSUFSQSxDQVNDLG9CQUFBSyxVQUFBQyxLQUFBLFdBQ0QsbUJDVEEsSUFBQUMsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVIsUUFHQSxJQUFBQyxFQUFBSyxFQUFBRSxJQUNBQyxFQUFBRCxFQUNBRSxHQUFBLEVBQ0FWLFlBVUEsT0FOQVcsRUFBQUgsR0FBQUksS0FBQVgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQU8sR0FHQU4sRUFBQVMsR0FBQSxFQUdBVCxFQUFBRCxRQTBEQSxPQXJEQU8sRUFBQU0sRUFBQUYsRUFHQUosRUFBQU8sRUFBQVIsRUFHQUMsRUFBQVEsRUFBQSxTQUFBZixFQUFBZ0IsRUFBQUMsR0FDQVYsRUFBQVcsRUFBQWxCLEVBQUFnQixJQUNBRyxPQUFBQyxlQUFBcEIsRUFBQWdCLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDVixFQUFBZ0IsRUFBQSxTQUFBdkIsR0FDQSxvQkFBQXdCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFwQixFQUFBd0IsT0FBQUMsYUFBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFwQixFQUFBLGNBQWlEMEIsT0FBQSxLQVFqRG5CLEVBQUFvQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFB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LElBQUFGLEVBQUFaLFFBQ3hCeEYsS0FBS3FHLE9BQU9JLFlBQWN6RyxLQUFLdUcsVUFDL0IsSUFBTUksRUFBTzNHLEtBQUtxSyxRQUFRckssS0FBS3VHLFdBRS9CdkcsS0FBS3FILFFBQVE3RCxLQUFLbUQsRUFBSzlCLFNBQ3ZCN0UsS0FBS2lILE1BQU1vRixrSkNqVGYsTUFBYSxxREFGYjFILENBQUF6RSxFQUFBLElBRWFzRiIsImZpbGUiOiJ0ZXh0LXJwZy1lbmdpbmUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJ0ZXh0LXJwZy1lbmdpbmVcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1widGV4dC1ycGctZW5naW5lXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInRleHQtcnBnLWVuZ2luZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZlbnRvcnkge1xuXG4gIGNvbnN0cnVjdG9yKGl0ZW1zID0gW10pIHtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gIH1cblxuICAvLyBXZSBjYW4gdXNlIHRoaXMgdG8gYWRkIHNpbmdsZSBvciBtdWx0aXBsZSBpdGVtcywgYXMgbG9uZyBhcyB0aGVcbiAgLy8gcGFzc2VkIHZhbHVlIGlzIGFuIGFycmF5XG4gIGFkZEl0ZW1zKGl0ZW1zKSB7XG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuY29uY2F0KGl0ZW1zKTtcbiAgICAvLyBNYWtlIGl0ZW1zIHVuaXF1ZSBmb3Igbm93LCBzaW5jZSB3ZSBkb24ndCBoYXZlIGEgc2V0IGxpbWl0IGZvciBhbnlcbiAgICB0aGlzLml0ZW1zID0gWy4uLm5ldyBTZXQodGhpcy5pdGVtcyldO1xuICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICB9XG5cbiAgZHJvcEl0ZW1zKGl0ZW1zKSB7XG4gICAgY29uc3QgbmV3SW52ZW50b3J5ID0gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbSA9PiAhaXRlbXMuaW5jbHVkZXMoaXRlbSkpO1xuXG4gICAgY29uc29sZS5sb2coJ05FVyBJVEVNUzogJywgbmV3SW52ZW50b3J5KTtcbiAgICB0aGlzLml0ZW1zID0gbmV3SW52ZW50b3J5O1xuICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICB9XG5cbiAgY2hlY2tGb3JJdGVtKGl0ZW1OYW1lLCBjb3VudCA9IDEpIHtcblxuICB9XG5cbiAgdHJhbnNmZXJJdGVtKGl0ZW1OYW1lLCBjb3VudCA9IDEpIHtcblxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9tcHQge1xuXG4gIGNvbnN0cnVjdG9yKG5hbWUgPSAnJywga2V5d29yZHMgPSBbXSwgcmVzdWx0cyA9IHt9LCBpdGVtUmVxdWlyZW1lbnRzID0gW10sIHNob3cgPSBmYWxzZSxcbiAgICBzaG93SWZMYWNraW5nUmVxdWlyZW1lbnRzID0gdHJ1ZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgLy8gS2V5d29yZHMgdGhhdCBjYW4gdHJpZ2dlciB0aGUgcHJvbXB0IChtYWtlIGFsbCBsb3dlci1jYXNlIGJ5IGRlZmF1bHQpXG4gICAgdGhpcy5rZXl3b3JkcyA9IGtleXdvcmRzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi50b0xvd2VyQ2FzZSgpO30pO1xuICAgIC8vIFJlc3VsdHMgdGhhdCBvY2N1ciB3aGVuIHRoaXMgcHJvbXB0IGlzIHN1Y2Nlc3NmdWxseSB0cmlnZ2VyZWQ7XG4gICAgLy8gdGhlIHJlc3VsdCBrZXlzIGNvbXByaXNlIG9mIOKAnHN1Y2Nlc3NUZXh04oCdIChyZXF1aXJlZCksIFwiZmFpbFRleHRcIiAob3B0aW9uYWwpLFxuICAgIC8vIOKAnGl0ZW1zUmVxdWlyZWTigJ0gKG9wdGlvbmFsKSwgYW5kIOKAnHJvb21Ub0VudGVy4oCdIChvcHRpb25hbClcbiAgICB0aGlzLnJlc3VsdHMgPSByZXN1bHRzO1xuICAgIC8vIEFueSBwcmVyZXF1aXNpdGUgaXRlbXMgbmVlZGVkIHRvIGRvIHRoZSBwcm9tcHRcbiAgICB0aGlzLml0ZW1SZXF1aXJlbWVudHMgPSBpdGVtUmVxdWlyZW1lbnRzO1xuICAgIC8vIFNob3cgcHJvbXB0IGFzIHZpc2liaWxlIChjbGlja2FibGUpIGluIERpc3BsYXk/XG4gICAgdGhpcy5zaG93ID0gc2hvdztcbiAgICB0aGlzLnNob3dJZkxhY2tpbmdSZXF1aXJlbWVudHMgPSBzaG93SWZMYWNraW5nUmVxdWlyZW1lbnRzO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgaW5wdXQgbWVzc2FnZSBtYXRjaGVzIGFueSBwcm9tcHQga2V5d29yZHMgYW5kIHJldHVybiByZXN1bHRzXG4gIG1hdGNoS2V5d29yZHMobWVzc2FnZSwgaXRlbXMgPSBbXSkge1xuICAgIGxldCBmb3VuZEtleXdvcmQgPSBmYWxzZTtcbiAgICBsZXQgbWlzc2luZ1JlcXVpcmVtZW50cyA9IFtdO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBhbnkgaXRlbSByZXF1aXJlbWVudHNcbiAgICBpZiAodGhpcy5pdGVtUmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIENoZWNrIGFsbCB0aGUgcmVxdWlyZW1lbnRzIGFnYWluc3QgdGhlIGl0ZW1zIHBhc3NlZFxuICAgICAgdGhpcy5pdGVtUmVxdWlyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGxldCBmb3VuZFJlcXVpcmVtZW50ID0gZmFsc2U7XG5cbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtID09PSByZXF1aXJlbWVudCkge1xuICAgICAgICAgICAgZm91bmRSZXF1aXJlbWVudCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgYSByZXF1aXJlbWVudCBpc24ndCBmb3VuZCBhZGQgdGhhdCBhIGxpc3RcbiAgICAgICAgaWYgKCFmb3VuZFJlcXVpcmVtZW50KSB7XG4gICAgICAgICAgbWlzc2luZ1JlcXVpcmVtZW50cy5wdXNoKHJlcXVpcmVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT25jZSB3ZSBjaGVjayB0byBzZWUgaWYgdGhlIHBsYXllcidzIG1pc3NpbmcgYW55IGl0ZW1zLFxuICAgIC8vIHBhcnNlIHRoZSBpbnB1dCBmb3IgbWF0Y2hpbmcga2V5d29yZHMgdG8gdGhlIHByb21wdFxuICAgIHRoaXMua2V5d29yZHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5d29yZCkge1xuICAgICAgaWYgKG1lc3NhZ2UudHJpbSgpLmluY2x1ZGVzKGtleXdvcmQudHJpbSgpLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGZvdW5kS2V5d29yZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gSWYgYW55IGtleXdvcmRzIGhhdmUgYmVlbiBtYXRjaGVkIGZyb20gdGhlIHVzZXIgaW5wdXRcbiAgICBpZiAoZm91bmRLZXl3b3JkKSB7XG4gICAgICAvLyBJZiB0aGVyZSBhcmUgYW55IG1pc3NpbmcgaXRlbSByZXF1aXJlbWVudHNcbiAgICAgIGlmIChtaXNzaW5nUmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gUHJvbXB0IGZhaWxzOyByZXR1cm4gbWlzc2luZyBpdGVtcyBhbmQgZmFpbFRleHRcbiAgICAgICAgcmV0dXJuIHsnZmFpbCc6IHtcbiAgICAgICAgICAnbWlzc2luZyc6IG1pc3NpbmdSZXF1aXJlbWVudHMsXG4gICAgICAgICAgJ2ZhaWxUZXh0JzogdGhpcy5yZXN1bHRzLmZhaWxUZXh0fVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLy8gUHJvbXB0IHN1Y2NlZWRzOyByZXR1cm4gcmVzdWx0cyBvZiB0aGUgcHJvbXB0XG4gICAgICByZXR1cm4geydzdWNjZXNzJzogdGhpcy5yZXN1bHRzfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBtYXRjaFJlcXVpcmVtZW50cyhpdGVtcyA9IFtdKSB7XG4gICAgbGV0IG1pc3NpbmdSZXF1aXJlbWVudHMgPSBbXTtcblxuICAgIC8vIElmIHdlIGhhdmUgYW55IGl0ZW0gcmVxdWlyZW1lbnRzXG4gICAgaWYgKHRoaXMuaXRlbVJlcXVpcmVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBDaGVjayBhbGwgdGhlIHJlcXVpcmVtZW50cyBhZ2FpbnN0IHRoZSBpdGVtcyBwYXNzZWRcbiAgICAgIHRoaXMuaXRlbVJlcXVpcmVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1aXJlbWVudCkge1xuICAgICAgICBsZXQgZm91bmRSZXF1aXJlbWVudCA9IGZhbHNlO1xuXG4gICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbSA9PT0gcmVxdWlyZW1lbnQpIHtcbiAgICAgICAgICAgIGZvdW5kUmVxdWlyZW1lbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIGEgcmVxdWlyZW1lbnQgaXNuJ3QgZm91bmQgYWRkIHRoYXQgYSBsaXN0XG4gICAgICAgIGlmICghZm91bmRSZXF1aXJlbWVudCkge1xuICAgICAgICAgIG1pc3NpbmdSZXF1aXJlbWVudHMucHVzaChyZXF1aXJlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBhcmUgYW55IG1pc3NpbmcgaXRlbSByZXF1aXJlbWVudHNcbiAgICBpZiAobWlzc2luZ1JlcXVpcmVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFByb21wdCBzdWNjZWVkczsgcmV0dXJuIHJlc3VsdHMgb2YgdGhlIHByb21wdFxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgUHJvbXB0IGZyb20gJy4vcHJvbXB0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vbSB7XG5cbiAgY29uc3RydWN0b3IobmFtZSwgZ2V0VGV4dCwgdHlwZSA9ICdkZWZhdWx0Jywgc2NyaXB0cyA9IFtdLCBwcm9tcHRzID0gW10sXG4gICAgaXRlbVJlcXVpcmVtZW50cyA9IFtdLCBpc1ByaXZhdGUgPSBmYWxzZSwgaXNTdWJSb29tID0gZmFsc2UsIHBhcmVudFJvb21zID0gW10sIHRlbXBsYXRlc0RpciA9ICdyb29tX3RlbXBsYXRlcy8nKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgIHRoaXMuZ2V0VGV4dCA9IGdldFRleHQ7IC8vIFRoZSB0ZXh0IHRoYXQgaXMgZGlzcGxheWVkIHdoZW4gdGhlIHJvb20gaXMgZW50ZXJlZFxuXG4gICAgdGhpcy50eXBlID0gdHlwZTtcblxuICAgIHRoaXMuaXNQcml2YXRlID0gaXNQcml2YXRlO1xuXG4gICAgdGhpcy50ZW1wbGF0ZXNEaXIgPSB0ZW1wbGF0ZXNEaXI7XG5cbiAgICB0aGlzLnNjcmlwdHMgPSBzY3JpcHRzO1xuICAgIC8vIHRoaXMucHJvbXB0cyA9IHByb21wdHM7IC8vIFdoYXQgYXJlIHRoZSBhY3Rpb25zIHRoYXQgd2UgY2FuIGRvIGluIHRoaXMgcm9vbT9cbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLnByb21wdHMgPSBbXTtcblxuICAgIC8vIEluc3RhbnRpYXRlIHRoZSBIVE1MIGFuZCBKUyBsb2dpYyB3aXRoaW4gdGhlIHRlbXBsYXRlXG4gICAgLy8gdGhpcy5tYWtlRnJvbVJvb21UZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZXNEaXIpO1xuXG4gICAgLy8gTG9hZCB0aGUgcHJvbXB0cyBnaXZlbiBmb3IgYSByb29tXG4gICAgcHJvbXB0cy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9tcHQpIHtcbiAgICAgIF90aGlzLmFkZFByb21wdChwcm9tcHQubmFtZSwgcHJvbXB0LmtleXdvcmRzLCBwcm9tcHQucmVzdWx0cywgcHJvbXB0Lml0ZW1SZXF1aXJlbWVudHMsIHByb21wdC5zaG93LFxuICAgICAgICBwcm9tcHQuc2hvd0lmTGFja2luZ1JlcXVpcmVtZW50cyk7XG4gICAgfSk7XG4gICAgdGhpcy5pdGVtUmVxdWlyZW1lbnRzID0gaXRlbVJlcXVpcmVtZW50czsgLy8gQW55IHJlcXVpcmVtZW50cyAoaXRlbXMpIG5lZWRlZCB0byBhY2Nlc3MgdGhlIHJvb21cblxuICB9XG5cbiAgbWFrZUZyb21Sb29tVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB0ZW1wbGF0ZXNEaXIgPSBudWxsKSB7XG4gICAgaWYgKHRlbXBsYXRlc0RpciAhPT0gbnVsbCkge1xuICAgICAgdGVtcGxhdGVzRGlyID0gdGhpcy50ZW1wbGF0ZXNEaXI7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIG5ldyBwcm9tcHQgLyBpbnRlcmFjdGlvbiB0byByb29tXG4gIGFkZFByb21wdChuYW1lLCBrZXl3b3JkcywgcmVzdWx0cywgcmVxdWlyZW1lbnRzLCBzaG93LCBzaG93SWZMYWNraW5nUmVxdWlyZW1lbnRzKSB7XG4gICAgY29uc3QgcHJvbXB0ID0gbmV3IFByb21wdChuYW1lLCBrZXl3b3JkcywgcmVzdWx0cywgcmVxdWlyZW1lbnRzLCBzaG93LCBzaG93SWZMYWNraW5nUmVxdWlyZW1lbnRzKTtcblxuICAgIHRoaXMucHJvbXB0cy5wdXNoKHByb21wdCk7XG4gICAgcmV0dXJuIHRoaXMucHJvbXB0cztcbiAgfVxuXG4gIC8vIEVudGVyIHRoZSByb29tXG4gIGVudGVyKGl0ZW1zID0gW10pIHtcbiAgICBsZXQgcmVzdWx0VGV4dCA9ICcnO1xuICAgIGxldCBtZXRBbGxSZXF1aXJlbWVudHMgPSB0cnVlOyAvLyBDYW4gd2UgZW50ZXIgdGhlIHJvb20/XG5cbiAgICAvLyBUaGUgcm9vbSBpcyBub3QgYWNjZXNzaWJsZSBieSBkZWZhdWx0IGlmIHdlIGhhdmUgbW9yZSB0aGFuIG9uZSByZXF1aXJlbWVudCAoaXRlbSlcbiAgICBpZiAodGhpcy5pdGVtUmVxdWlyZW1lbnRzID4gMCkge1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBtZXRBbGxSZXF1aXJlbWVudHMgPSBmYWxzZTtcbiAgICAgICAgLy8gQXBwZW5kIG1pc3NpbmcgcmVxdWlyZW1lbnQgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5pdGVtUmVxdWlyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgICAgcmVzdWx0VGV4dCArPSBgJHtyZXF1aXJlbWVudC5mYWlsVGV4dH0uIGA7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHJvb20ncyByZXF1aXJlbWVudHMgYWdhaW5zdCBpdGVtcyB0byBzZWUgaWYgdGhleSdyZSBhbGwgZm91bmRcbiAgICAgICAgdGhpcy5pdGVtUmVxdWlyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpdGVtID09PSByZXF1aXJlbWVudCkge1xuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGZvdW5kID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0QWxsUmVxdWlyZW1lbnRzID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBSZXR1cm4gZmFpbCBtZXNzYWdlcyBmb3IgbWlzc2luZyByZXF1aXJlbWVudHNcbiAgICAgICAgICAgIHJlc3VsdFRleHQgKz0gcmVxdWlyZW1lbnQuZmFpbFRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgYWxsIGl0ZW0gcmVxdWlyZW1lbnRzIGhhdmUgYmVlbiBmb3VuZCwgcmV0dXJuIHJvb20gdGV4dFxuICAgICAgICBpZiAobWV0QWxsUmVxdWlyZW1lbnRzID09PSB0cnVlKSB7XG4gICAgICAgICAgcmVzdWx0VGV4dCA9IHRoaXMuZ2V0VGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gTm8gaXRlbXMgcmVxdWlyZWQgdG8gZW50ZXIgdGhlIHJvb20sIHJldHVybiByb29tIHRleHRcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0VGV4dCA9IHRoaXMuZ2V0VGV4dDtcbiAgICB9XG4gICAgLy8gUmV0dXJuIHJlc3VsdGluZyB0ZXh0IGFuZCB3aGV0aGVyIG9yIG5vdCByb29tIGNvdWxkIGJlIGVudGVyZWRcbiAgICByZXR1cm4gW3Jlc3VsdFRleHQsIG1ldEFsbFJlcXVpcmVtZW50c107XG4gIH1cblxuICAvLyBXaGVuIGEgbmV3IHJvb20gaXMgbG9hZGVkLCB0aGUgZXh0ZXJuYWwgc2NyaXB0cyBuZWVkZWQgKHBhc3NlZCBpbiBhbiBhcnJheVxuICAvLyBmcm9tIHRoZSBnYW1lIGRhdGEpIHdpbGwgYmUgZ290dGVuIGFuZCBhcHBlbmRlZCB0byB0aGUgcGFnZS5cbiAgbG9hZFJvb21TY3JpcHRzKCkge1xuICAgIHRoaXMuc2NyaXB0cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JpcHRVcmwpIHtcbiAgICAgIGxldCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnc3JjJywgc2NyaXB0VXJsKTtcbiAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcpO1xuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnZGVmZXInLCAnZGVmZXInKTtcblxuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnYXN5bmMnLCAndHJ1ZScpO1xuXG4gICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgZG8gc3R1ZmYgd2l0aCB0aGUgc2NyaXB0XG4gICAgICB9O1xuXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7IC8vIG9yIHNvbWV0aGluZyBvZiB0aGUgbGlrZXNcbiAgICB9KTtcbiAgfVxufVxuXG4iLCJpbXBvcnQgSW52ZW50b3J5IGZyb20gJy4vaW52ZW50b3J5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIHtcblxuICBjb25zdHJ1Y3RvcihuYW1lID0gJycsIGludmVudG9yeSA9IG5ldyBJbnZlbnRvcnkoKSwgY3VycmVudFJvb20gPSAnJywgc3RhcnRSb29tLFxuICAgIHBhcmVudFJvb21zID0gW10sIGluU3ViUm9vbSA9IGZhbHNlKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICBpZiAodGhpcy5uYW1lID09PSAnJykge1xuICAgICAgdGhpcy5uYW1lID0gJ3BsYXllcic7XG4gICAgfVxuICAgIHRoaXMuaW52ZW50b3J5ID0gaW52ZW50b3J5O1xuICAgIGlmICh0aGlzLmN1cnJlbnRSb29tID09PSAnJykge1xuICAgICAgdGhpcy5jdXJyZW50Um9vbSA9IHRoaXMuc3RhcnRSb29tO1xuICAgIH1cbiAgICB0aGlzLnN0YXJ0Um9vbSA9IHN0YXJ0Um9vbTtcbiAgICB0aGlzLnBhcmVudFJvb21zID0gcGFyZW50Um9vbXM7XG4gICAgdGhpcy5pblN1YlJvb20gPSBmYWxzZTtcbiAgfVxuXG4gIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuXG4gIHNldE5hbWUobmFtZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cblxuICBlbnRlclJvb20ocm9vbSkge1xuICAgIGNvbnN0IHJvb21SZXN1bHQgPSByb29tLmVudGVyKHRoaXMuaW52ZW50b3J5Lml0ZW1zKTtcblxuICAgIGlmIChyb29tUmVzdWx0WzFdID09PSBmYWxzZSkge1xuICAgICAgLy8gUGxheWVyIGRpZCBub3QgaGF2ZSByZXF1aXJlZCBpdGVtcyB0byBlbnRlciB0aGUgcm9vbVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbnRlcmVkIHJvb20gc3VjY2Vzc2Z1bGx5XG4gICAgICB0aGlzLmN1cnJlbnRSb29tID0gcm9vbS5uYW1lO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gcmVzdWx0cyB0ZXh0IGFuZCB3aGV0aGVyIG9yIG5vdCBwbGF5ZXIgc3VjY2Vzc2Z1bGx5IGVudGVyZWQgcm9vbVxuICAgIHJldHVybiBbcm9vbVJlc3VsdFswXSwgcm9vbVJlc3VsdFsxXV07XG4gIH1cblxuICBnZXRJdGVtKGl0ZW0pIHtcbiAgICB0aGlzLmludmVudG9yeS5hZGRJdGVtKGl0ZW0pO1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeTtcbiAgfVxuXG4gIGRyb3BJdGVtKGl0ZW0pIHtcbiAgICB0aGlzLmludmVudG9yeS5kcm9wSXRlbShpdGVtKTtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnk7XG4gIH1cblxuICBnZXRTdGF0ZShjb25maWcpIHtcblxuICB9XG5cbiAgc2F2ZVN0YXRlKGNvbmZpZykge1xuXG4gIH1cblxuICBjb25uZWN0V2FsbGV0KCkge1xuXG4gIH1cblxuICBkaXNjb25uZWN0V2FsbGV0KCkge1xuXG4gIH1cblxuICBnZXRJbnZlbnRvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dCB7XG5cbiAgY29uc3RydWN0b3IoZGlzYWJsZWQgPSBmYWxzZSwgdmFsdWUgPSAnJywgZWxlbWVudElkID0gJ2lucHV0Jykge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5lbGVtZW50SWQgPSBlbGVtZW50SWQ7XG4gIH1cblxuICBlbmFibGUoKSB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dCcpLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICBkaXNhYmxlKCkge1xuICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dCcpLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHNlbmQodmFsdWUpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5wdXQgdmFsdWVzIChpZiBkZXNpcmVkKVxuICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxufVxuXG4iLCIndXNlIHN0cmljdCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNwbGF5IHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBodG1sID0gJycsXG4gICAgZWxlbWVudElkID0gJ2Rpc3BsYXknLFxuICAgIHByb21wdENvbnRhaW5lcklkID0gJ3Byb21wdHMnLFxuICAgIGludmVudG9yeUNvbnRhaW5lcklkID0gJ2ludmVudG9yeScsXG4gICAgaW52ZW50b3J5TGlzdElkID0gJ2ludmVudG9yeUxpc3QnLFxuICAgIHByb21wdENvbnRhaW5lckNsYXNzID0gJ3Byb21wdCcsXG4gICAgcHJvbXB0Q29udGFpbmVyUmV2ZWFsZWRDbGFzcyA9ICdwcm9tcHQtcmV2ZWFsZWQnLFxuICAgIGl0ZW1Db250YWluZXJDbGFzcyA9ICdpbnZlbnRvcnlJdGVtJ1xuICApIHtcbiAgICB0aGlzLmh0bWwgPSBodG1sO1xuICAgIHRoaXMuZWxlbWVudElkID0gZWxlbWVudElkO1xuICAgIHRoaXMucHJvbXB0Q29udGFpbmVySWQgPSBwcm9tcHRDb250YWluZXJJZDtcbiAgICB0aGlzLnByb21wdENvbnRhaW5lckNsYXNzID0gcHJvbXB0Q29udGFpbmVyQ2xhc3M7XG4gICAgdGhpcy5wcm9tcHRDb250YWluZXJSZXZlYWxlZENsYXNzID0gcHJvbXB0Q29udGFpbmVyUmV2ZWFsZWRDbGFzcztcbiAgICB0aGlzLmludmVudG9yeUNvbnRhaW5lcklkID0gaW52ZW50b3J5Q29udGFpbmVySWQ7XG4gICAgdGhpcy5pbnZlbnRvcnlMaXN0SWQgPSBpbnZlbnRvcnlMaXN0SWQ7XG4gICAgdGhpcy5pdGVtQ29udGFpbmVyQ2xhc3MgPSBpdGVtQ29udGFpbmVyQ2xhc3M7XG4gIH1cblxuICBzaG93KGh0bWwgPSBudWxsKSB7XG4gICAgaWYgKGh0bWwgPT09IG51bGwpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudElkKS5pbm5lckhUTUwgPSB0aGlzLmh0bWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudElkKS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgdGhpcy5odG1sID0gaHRtbDtcbiAgICB9XG4gIH1cblxuICBzaG93UHJvbXB0cyhcbiAgICBwcm9tcHRzLFxuICAgIHByb21wdENvbnRhaW5lcklkID0gdGhpcy5wcm9tcHRDb250YWluZXJJZCxcbiAgICBwcm9tcHRDb250YWluZXJDbGFzcyA9IHRoaXMucHJvbXB0Q29udGFpbmVyQ2xhc3MsXG4gICkge1xuICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcm9tcHRDb250YWluZXJJZCk7XG5cbiAgICBjb250YWluZXIucmVwbGFjZUNoaWxkcmVuKCk7XG5cbiAgICBpZiAocHJvbXB0cy5sZW5ndGggPj0gMSkge1xuXG4gICAgICBwcm9tcHRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKHByb21wdENvbnRhaW5lckNsYXNzKTtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBlbGVtZW50Lm5hbWU7XG5cbiAgICAgICAgaWYgKCdzaG93JyBpbiBlbGVtZW50ID09PSB0cnVlKSB7XG4gICAgICAgICAgbGV0IHNob3c7XG5cbiAgICAgICAgICBzaG93ID0gZWxlbWVudC5zaG93O1xuICAgICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoJ3JldmVhbGVkJyBpbiBlbCkge1xuICAgICAgICAgICAgaWYgKGVsLnJldmVhbGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGxldCBlbFJldmVhbGVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4gICAgICAgICAgICAgIC8vIGVsUmV2ZWFsZWQuY2xhc3NMaXN0LmFkZChwcm9tcHRDb250YWluZXJSZXZlYWxlZENsYXNzKTtcbiAgICAgICAgICAgICAgZWxSZXZlYWxlZC50ZXh0Q29udGVudCA9IGVsZW1lbnQubmFtZTtcbiAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChlbFJldmVhbGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNob3dJbnZlbnRvcnkoXG4gICAgaXRlbXMsXG4gICAgaW52ZW50b3J5Q29udGFpbmVySWQgPSB0aGlzLmludmVudG9yeUNvbnRhaW5lcklkLFxuICAgIGludmVudG9yeUxpc3RJZCA9IHRoaXMuaW52ZW50b3J5TGlzdElkLFxuICAgIGl0ZW1Db250YWluZXJDbGFzcyA9IHRoaXMuaXRlbUNvbnRhaW5lckNsYXNzXG4gICkge1xuICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnZlbnRvcnlDb250YWluZXJJZCk7XG5cbiAgICBjb250YWluZXIucmVwbGFjZUNoaWxkcmVuKCk7XG5cbiAgICBpZiAoaXRlbXMubGVuZ3RoID49IDEpIHtcbiAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnZlbnRvcnlMaXN0Jyk7XG5cbiAgICAgIGVsLmlubmVySFRNTCA9ICdJbnZlbnRvcnknO1xuICAgICAgLy8gZWwuY2xhc3NMaXN0LmFkZCgnd2VsbCBwYWdlIGFjdGl2ZScpO1xuICAgICAgLy8gZWwudGV4dENvbnRlbnQgPSAnSW52ZW50b3J5JztcbiAgICAgIC8vIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAvLyBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAvLyBlbC5pZCA9IGludmVudG9yeUxpc3RJZDtcblxuICAgICAgLy8gY29udGFpbmVyLmFwcGVuZENoaWxkKGVsKTtcblxuICAgICAgLy8gbGV0IGNvbnRhaW5lcjIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnZlbnRvcnlMaXN0SWQpO1xuXG4gICAgICBpdGVtcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoaXRlbUNvbnRhaW5lckNsYXNzKTtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBlbGVtZW50O1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAvLyBjb250YWluZXIyLmFwcGVuZENoaWxkKGVsKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW52ZW50b3J5TGlzdCcpO1xuXG4gICAgICBlbC5pbm5lckhUTUwgPSAnJztcbiAgICB9XG4gIH1cblxuICAvLyBBcHBlbmQgSFRNTCBjb250ZW50IHRvIGRpc3BsYXkgc2NyZWVuXG4gIGFwcGVuZChodG1sKSB7XG4gICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudElkKS5hcHBlbmQobm9kZSk7XG4gIH1cblxuICBhcHBlbmRUb1BhcmVudChodG1sKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50SWQpLnBhcmVudEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGh0bWwpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50SWQpLmlubmVySFRNTCA9ICcnO1xuICB9XG59XG4iLCJpbXBvcnQgRGlzcGxheSBmcm9tICcuL2Rpc3BsYXknO1xuaW1wb3J0IElucHV0IGZyb20gJy4vaW5wdXQnO1xuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XG5pbXBvcnQgUm9vbSBmcm9tICcuL3Jvb20nO1xuaW1wb3J0IEludmVudG9yeSBmcm9tICcuL2ludmVudG9yeSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xuXG4gIGNvbnN0cnVjdG9yKHJvb21zID0gW10sIGl0ZW1zID0gW10sIHN0YXJ0Um9vbSA9ICcnLCBlbmRSb29tID0gJycpIHtcbiAgICB0aGlzLkRpc3BsYXkgPSBuZXcgRGlzcGxheSgpO1xuICAgIHRoaXMuSW5wdXQgPSBuZXcgSW5wdXQoKTtcbiAgICB0aGlzLnJvb21zID0gW107IC8vIEFsbCB0aGUgcm9vbXMgaW4gb3VyIGdhbWVcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICByb29tcy5mb3JFYWNoKGZ1bmN0aW9uIChyb29tKSB7XG4gICAgICBfdGhpcy5hZGRSb29tKHJvb20ubmFtZSwgcm9vbS5nZXRUZXh0LCByb29tLnR5cGUsIHJvb20ucHJvbXB0cywgcm9vbS5pdGVtUmVxdWlyZW1lbnRzKTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXJ0Um9vbSA9IHN0YXJ0Um9vbTsgLy8gV2hpY2ggcm9vbSB3aWxsIHRoZSBwbGF5ZXIgc3RhcnQgaW5cbiAgICB0aGlzLmVuZFJvb20gPSBlbmRSb29tOyAvLyBXaGljaCByb29tIGlzIHRoZSB3aW5uaW5nIC8gZ2FtZSBlbmRcblxuICAgIC8vIElmIGdhbWUgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggYSBzdGFydFJvb20sIHNldCBpdCB0byB0aGUgZmlyc3Qgcm9vbVxuICAgIGlmICh0aGlzLnN0YXJ0Um9vbSA9PT0gJycgJiYgdGhpcy5yb29tcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnN0YXJ0Um9vbSA9IHRoaXMucm9vbXNbMF0ubmFtZTtcbiAgICAgIHRoaXMuUGxheWVyLnN0YXJ0Um9vbSA9IHRoaXMuc3RhcnRSb29tO1xuICAgICAgdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSB0aGlzLlBsYXllci5zdGFydFJvb207XG4gICAgfVxuICAgIC8vIElmIGdhbWUgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggYSBlbmRSb29tLCBzZXQgaXQgdG8gdGhlIGxhc3Qgcm9vbVxuICAgIGlmICh0aGlzLmVuZFJvb20gPT09ICcnICYmIHRoaXMucm9vbXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5lbmRSb29tID0gdGhpcy5yb29tc1t0aGlzLnJvb21zLmxlbmd0aCAtIDFdLm5hbWU7XG4gICAgfVxuICAgIHRoaXMuUGxheWVyID0gbmV3IFBsYXllcihzdGFydFJvb20gPSB0aGlzLnN0YXJ0Um9vbSk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGxldCBkaXNwbGF5VGV4dDtcblxuICAgIC8vIElmIGdhbWUgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggYSBzdGFydFJvb20sIHNldCBpdCB0byB0aGUgZmlyc3Qgcm9vbVxuICAgIGlmICh0aGlzLnN0YXJ0Um9vbSA9PT0gJycgJiYgdGhpcy5yb29tcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnN0YXJ0Um9vbSA9IHRoaXMucm9vbXNbMF0ubmFtZTtcbiAgICAgIHRoaXMuUGxheWVyLnN0YXJ0Um9vbSA9IHRoaXMuc3RhcnRSb29tO1xuICAgICAgLy8gRW50ZXIgZmlyc3Qgcm9vbVxuICAgICAgdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSB0aGlzLlBsYXllci5zdGFydFJvb207XG4gICAgfVxuICAgIC8vIElmIGdhbWUgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggYSBlbmRSb29tLCBzZXQgaXQgdG8gdGhlIGxhc3Qgcm9vbVxuICAgIGlmICh0aGlzLmVuZFJvb20gPT09ICcnICYmIHRoaXMucm9vbXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5lbmRSb29tID0gdGhpcy5yb29tc1t0aGlzLnJvb21zLmxlbmd0aCAtIDFdLm5hbWU7XG4gICAgfVxuICAgIC8vIERpc3BsYXkgcm9vbVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb29tcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMucm9vbXNbaV0ubmFtZSA9PT0gdGhpcy5QbGF5ZXIuY3VycmVudFJvb20pIHtcbiAgICAgICAgZGlzcGxheVRleHQgPSB0aGlzLnJvb21zW2ldLmdldFRleHQ7XG4gICAgICAgIHRoaXMucm9vbXNbaV0ubG9hZFJvb21TY3JpcHRzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFNhdmUgc3RhdGUgYXMgZW50ZXJlZCByb29tXG4gICAgaWYgKGRpc3BsYXlUZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpc3BsYXlUZXh0ID0gJ05vIHJvb20gdGV4dCBmb3VuZC4nO1xuICAgIH1cbiAgICB0aGlzLnJlZnJlc2hEaXNwbGF5KGRpc3BsYXlUZXh0KTtcbiAgfVxuXG4gIC8vIExvYWRzIGdhbWUgZGF0YSBmcm9tIEpTT04gb2JqZWN0IHBhc3NlZFxuICBsb2FkRGF0YShnYW1lRGF0YSkge1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcblxuICAgIGdhbWVEYXRhLmdhbWUucm9vbXMuZm9yRWFjaChmdW5jdGlvbiAocm9vbSkge1xuICAgICAgLy8gY29uc29sZS5sb2cocm9vbSk7XG4gICAgICBsZXQgcm9vbVByb21wdHMgPSBbXTtcbiAgICAgIGxldCByb29tUmVxdWlyZW1lbnRzID0gW107XG4gICAgICBsZXQgcm9vbVNjcmlwdHMgPSBbXTtcbiAgICAgIGxldCByb29tVHlwZSA9ICdkZWZhdWx0JztcblxuICAgICAgLy8gUm9vbSBwcm9tcHRzIGFuZCByZXF1aXJlbWVudHMgYXJlIG9wdGlvbmFsIHNvIGhhbmRsZSB0aGF0XG4gICAgICBpZiAocm9vbS5wcm9tcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcm9vbVByb21wdHMgPSByb29tLnByb21wdHM7XG4gICAgICB9XG4gICAgICBpZiAocm9vbS5pdGVtUmVxdWlyZW1lbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcm9vbVJlcXVpcmVtZW50cyA9IHJvb20uaXRlbVJlcXVpcmVtZW50cztcbiAgICAgIH1cbiAgICAgIGlmIChyb29tLnNjcmlwdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByb29tU2NyaXB0cyA9IHJvb20uc2NyaXB0cztcbiAgICAgIH1cbiAgICAgIGlmIChyb29tLnR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByb29tVHlwZSA9IHJvb20udHlwZTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmFkZFJvb20ocm9vbS5uYW1lLCByb29tLmdldFRleHQsIHJvb21UeXBlLCByb29tU2NyaXB0cywgcm9vbVByb21wdHMsIHJvb21SZXF1aXJlbWVudHMpO1xuICAgIH0pO1xuXG4gICAgaWYgKGdhbWVEYXRhLnN0YXJ0Um9vbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN0YXJ0Um9vbSA9IGdhbWVEYXRhLnN0YXJ0Um9vbTtcbiAgICAgIHRoaXMuUGxheWVyLnN0YXJ0Um9vbSA9IGdhbWVEYXRhLnN0YXJ0Um9vbTtcbiAgICB9XG4gICAgaWYgKGdhbWVEYXRhLmVuZFJvb20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5lbmRSb29tID0gZ2FtZURhdGEuZW5kUm9vbTtcbiAgICB9XG4gICAgLy8gSWYgZ2FtZSB3YXNuJ3QgaW5pdGlhbGl6ZWQgd2l0aCBhIHN0YXJ0Um9vbSwgc2V0IGl0IHRvIHRoZSBmaXJzdCByb29tXG4gICAgaWYgKHRoaXMuc3RhcnRSb29tID09PSAnJyB8fCB0aGlzLnN0YXJ0Um9vbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5yb29tcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuc3RhcnRSb29tID0gdGhpcy5yb29tc1swXS5uYW1lO1xuICAgICAgICB0aGlzLlBsYXllci5zdGFydFJvb20gPSB0aGlzLnN0YXJ0Um9vbTtcbiAgICAgICAgdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSB0aGlzLlBsYXllci5zdGFydFJvb207XG4gICAgICB9XG4gICAgfVxuICAgIC8vIElmIGdhbWUgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggYSBlbmRSb29tLCBzZXQgaXQgdG8gdGhlIGxhc3Qgcm9vbVxuICAgIGlmICh0aGlzLmVuZFJvb20gPT09ICcnIHx8IHRoaXMuZW5kUm9vbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5yb29tcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMuZW5kUm9vbSA9IHRoaXMucm9vbXNbdGhpcy5yb29tcy5sZW5ndGggLSAxXS5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNhdmVQbGF5ZXJTdGF0ZShjb25maWcpIHtcbiAgfVxuXG4gIGxvYWRQbGF5ZXJTdGF0ZShjb25maWcpIHtcbiAgfVxuXG4gIC8vIE1hbmFnZSByb29tc1xuICBhZGRSb29tKG5hbWUsIGdldFRleHQsIHJvb21UeXBlID0gJ2RlZmF1bHQnLCBzY3JpcHRzID0gW10sIHByb21wdHMgPSBbXSwgcmVxdWlyZW1lbnRzID0gW10pIHtcbiAgICBsZXQgcm9vbU9iaiA9IG5ldyBSb29tKG5hbWUsIGdldFRleHQsIHJvb21UeXBlLCBzY3JpcHRzLCBwcm9tcHRzLCByZXF1aXJlbWVudHMpO1xuXG4gICAgdGhpcy5yb29tcy5wdXNoKHJvb21PYmopO1xuICAgIHJldHVybiByb29tT2JqO1xuICB9XG5cbiAgZHJvcFJvb20ocm9vbU5hbWUpIHtcbiAgICBsZXQgbmV3Um9vbXMgPSB0aGlzLnJvb21zLmZpbHRlcihmdW5jdGlvbiAocm9vbSkge1xuICAgICAgcmV0dXJuIHJvb20ubmFtZSAhPT0gcm9vbU5hbWU7XG4gICAgfSk7XG5cbiAgICB0aGlzLnJvb21zID0gbmV3Um9vbXM7XG4gICAgcmV0dXJuIHRoaXMucm9vbXM7XG4gIH1cblxuICAvLyBSZXR1cm5zIHJvb20gb2JqZWN0IChwcm9wZXJ0aWVzKSBnaXZlbiB0aGUgbmFtZVxuICBnZXRSb29tKHJvb21OYW1lKSB7XG4gICAgY29uc3Qgcm9vbSA9IHRoaXMucm9vbXMuZmluZCh4ID0+IHgubmFtZSA9PT0gcm9vbU5hbWUpO1xuXG4gICAgcmV0dXJuIHJvb207XG4gIH1cblxuICAvLyBVc2VyIGlucHV0XG4gIHVzZXJTZW5kKG1lc3NhZ2UpIHtcbiAgICAvLyBPdXIgSW5wdXQgY2xhc3Mgd2lsbCBoYW5kbGUgY2xlYW5pbmcgLyBub3JtYWxpemluZyBzdHJpbmdzXG4gICAgdGhpcy5JbnB1dC5zZW5kKG1lc3NhZ2UpO1xuICAgIHRoaXMuZGVjaWRlUGF0aCh0aGlzLklucHV0LnZhbHVlKTtcbiAgfVxuXG4gIHJlZnJlc2hEaXNwbGF5KGRpc3BsYXlUZXh0ID0gbnVsbCkge1xuICAgIGlmIChkaXNwbGF5VGV4dCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5EaXNwbGF5LnNob3coZGlzcGxheVRleHQpO1xuICAgIH1cblxuICAgIGxldCBwcm9tcHRzVG9TaG93ID0gW107XG5cbiAgICB0aGlzLmdldFJvb20odGhpcy5QbGF5ZXIuY3VycmVudFJvb20pLnByb21wdHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmICgnc2hvd0lmTGFja2luZ1JlcXVpcmVtZW50cycgaW4gZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC5zaG93SWZMYWNraW5nUmVxdWlyZW1lbnRzID09PSB0cnVlKSB7XG4gICAgICAgICAgcHJvbXB0c1RvU2hvdy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChlbGVtZW50Lm1hdGNoUmVxdWlyZW1lbnRzKHRoaXMuUGxheWVyLmludmVudG9yeS5pdGVtcykgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnRbJ3JldmVhbGVkJ10gPSB0cnVlO1xuICAgICAgICAgICAgcHJvbXB0c1RvU2hvdy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsZW1lbnQubWF0Y2hSZXF1aXJlbWVudHModGhpcy5QbGF5ZXIuaXRlbXMpID09PSB0cnVlKSB7XG4gICAgICAgICAgcHJvbXB0c1RvU2hvdy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5EaXNwbGF5LnNob3dQcm9tcHRzKHByb21wdHNUb1Nob3cpO1xuICAgIHRoaXMuRGlzcGxheS5zaG93SW52ZW50b3J5KHRoaXMuUGxheWVyLmludmVudG9yeS5pdGVtcyk7XG5cbiAgICB0aGlzLmdldFJvb20odGhpcy5QbGF5ZXIuY3VycmVudFJvb20pLmxvYWRSb29tU2NyaXB0cygpO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb21wdCcpLmZvckVhY2goaSA9PiBpLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnY2xpY2snLFxuICAgICAgZSA9PiB7XG4gICAgICAgIHRoaXMudXNlclNlbmQoZS5jdXJyZW50VGFyZ2V0LmlubmVyVGV4dCk7XG4gICAgICB9KSk7XG4gIH1cblxuICAvLyBHYW1lIEFJXG4gIGRlY2lkZVBhdGgobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSAncmVzdGFydCcpIHtcbiAgICAgIHRoaXMucmVzZXRHYW1lKCk7XG4gICAgfVxuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBjb25zdCBjdXJyUm9vbSA9IF90aGlzLmdldFJvb20oX3RoaXMuUGxheWVyLmN1cnJlbnRSb29tKTtcblxuICAgIC8vIERvIHdlIGhhdmUgYWN0aW9ucyB0aGF0IHdlIGNhbiBkbyBpbiB0aGUgcm9vbT9cbiAgICBpZiAodHlwZW9mIGN1cnJSb29tLnByb21wdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ2hlY2sgZXZlcnkgcHJvbXB0IGFjdGlvbiB0byBzZWUgaWYgaXQgbWF0Y2hlcyBvdXIgaW5wdXQga2V5d29yZHNcbiAgICAgIC8vIEZvciBub3cganVzdCBnZXQgdGhlIGZpcnN0IG1hdGNoaW5nIHByb21wdCBhbmQgZG8gdGhhdFxuICAgICAgbGV0IGZvdW5kUHJvbXB0ID0gZmFsc2U7XG5cbiAgICAgIGN1cnJSb29tLnByb21wdHMuZm9yRWFjaChmdW5jdGlvbiAocHJvbXB0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGZvdW5kUHJvbXB0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdQcm9tcHRSZXN1bHRzID0gcHJvbXB0Lm1hdGNoS2V5d29yZHMobWVzc2FnZSwgX3RoaXMuUGxheWVyLmludmVudG9yeS5pdGVtcyk7XG5cbiAgICAgICAgICAgIC8vIElmIHdlIGdldCBhIG1hdGNoaW5nIHJlc3VsdCBiYWNrXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdQcm9tcHRSZXN1bHRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgcHJvbXB0IGhhcyBrZXl3b3JkcyB0aGF0IG1hdGNoIHRoZSB1c2VyJ3MgaW5wdXRcbiAgICAgICAgICAgICAgZm91bmRQcm9tcHQgPSB0cnVlO1xuICAgICAgICAgICAgICAvLyBJZiBwbGF5ZXIgc3VjY2VlZGVkIGluIHByb21wdCBhY3Rpb25cbiAgICAgICAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiBtYXRjaGluZ1Byb21wdFJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgaXRlbXMgZnJvbSBwcm9tcHQgaWYgYW55IGFyZSByZXR1cm5lZCBhbmQgYWRkIHRoZW0gdG8gaW52ZW50b3J5XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoaW5nUHJvbXB0UmVzdWx0cy5zdWNjZXNzLml0ZW1zR2l2ZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuUGxheWVyLmludmVudG9yeS5hZGRJdGVtcyhtYXRjaGluZ1Byb21wdFJlc3VsdHMuc3VjY2Vzcy5pdGVtc0dpdmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoaW5nUHJvbXB0UmVzdWx0cy5zdWNjZXNzLml0ZW1zUmVtb3ZlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5QbGF5ZXIuaW52ZW50b3J5LmRyb3BJdGVtcyhtYXRjaGluZ1Byb21wdFJlc3VsdHMuc3VjY2Vzcy5pdGVtc1JlbW92ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcHJvbXB0IHN1Y2Nlc3MgcmVzdWx0IGluY2x1ZGVzIGVudGVyaW5nIGEgbmV3IHJvb20uLlxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGluZ1Byb21wdFJlc3VsdHMuc3VjY2Vzcy5yb29tVG9FbnRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZW50ZXJSb29tUmVzdWx0U3VjY2VzcztcbiAgICAgICAgICAgICAgICAgIGxldCBlbnRlclJvb21SZXN1bHRUZXh0O1xuXG4gICAgICAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgcGxheWVyIGNhbiBzdWNjZXNzZnVsbHkgZW50ZXIgdGhlIHJvb20gKGdpdmVuIHRoZSBpbnZlbnRvcnkgLyByb29tIHJlcXVpcmVtZW50cylcbiAgICAgICAgICAgICAgICAgIFtlbnRlclJvb21SZXN1bHRUZXh0LCBlbnRlclJvb21SZXN1bHRTdWNjZXNzXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5QbGF5ZXIuZW50ZXJSb29tKF90aGlzLmdldFJvb20obWF0Y2hpbmdQcm9tcHRSZXN1bHRzLnN1Y2Nlc3Mucm9vbVRvRW50ZXIpKTtcbiAgICAgICAgICAgICAgICAgIF90aGlzLkRpc3BsYXkuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5nZXRSb29tKF90aGlzLlBsYXllci5jdXJyZW50Um9vbSkudHlwZSA9PT0gJ2NoYXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkRpc3BsYXkuYXBwZW5kKGAke2VudGVyUm9vbVJlc3VsdFRleHR9YCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5EaXNwbGF5LmFwcGVuZChgJHtlbnRlclJvb21SZXN1bHRUZXh0fWApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoaW5nUHJvbXB0UmVzdWx0cy5zdWNjZXNzLnN1Y2Nlc3NUZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuRGlzcGxheS5hcHBlbmQoYDxwIGNsYXNzPSdzdWNjZXNzVGV4dCc+JHttYXRjaGluZ1Byb21wdFJlc3VsdHMuc3VjY2Vzcy5zdWNjZXNzVGV4dH08L3A+YCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoZW50ZXJSb29tUmVzdWx0U3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgcGxheWVyIGVudGVyZWQgd2lubmluZyByb29tXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGluZ1Byb21wdFJlc3VsdHMuc3VjY2Vzcy5yb29tVG9FbnRlciA9PT0gX3RoaXMuZW5kUm9vbSkge1xuICAgICAgICAgICAgICAgICAgICAgIF90aGlzLndpbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBQbGF5ZXIgY291bGQgbm90IGVudGVyIHJvb20gKG1pc3NpbmcgcmVxdWlyZWQgaXRlbXMgaW4gaW52ZW50b3J5KVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBQbGF5ZXIgZmFpbGVkIHRvIGRvIHByb21wdCAobWlzc2luZyBpdGVtIHJlcXVpcmVtZW50KVxuICAgICAgICAgICAgICBpZiAoJ2ZhaWwnIGluIG1hdGNoaW5nUHJvbXB0UmVzdWx0cykge1xuICAgICAgICAgICAgICAgIF90aGlzLkRpc3BsYXkuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5EaXNwbGF5LmFwcGVuZChgJHtfdGhpcy5nZXRSb29tKF90aGlzLlBsYXllci5jdXJyZW50Um9vbSkuZ2V0VGV4dH1gKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdQcm9tcHRSZXN1bHRzLmZhaWwuZmFpbFRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuRGlzcGxheS5hcHBlbmQoYDxwIGNsYXNzPSdmYWlsVGV4dCc+JHttYXRjaGluZ1Byb21wdFJlc3VsdHMuZmFpbC5mYWlsVGV4dH08L3A+YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLkRpc3BsYXkuYXBwZW5kKGA8cCBjbGFzcz0nbWlzc2luZ0l0ZW1zJz5NaXNzaW5nIHJlcXVpcmVkIGl0ZW1zOiBcbiAgICAgICAgICAgICAgICAgICR7bWF0Y2hpbmdQcm9tcHRSZXN1bHRzLmZhaWwubWlzc2luZy50b1N0cmluZygpfS5cbiAgICAgICAgICAgICAgICA8L3A+YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZFByb21wdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAvLyBQbGF5ZXIgZGlkbid0IHNheSBhbnkga2V5d29yZHMgdGhhdCB0cmlnZ2VyZWQgYW55IG9mIHRoZSBjdXJyZW50IHJvb20gcHJvbXB0c1xuICAgICAgICAgIF90aGlzLkRpc3BsYXkuc2hvdyhgJHtfdGhpcy5nZXRSb29tKF90aGlzLlBsYXllci5jdXJyZW50Um9vbSkuZ2V0VGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSdmYWlsVGV4dCc+Tm8gYWN0aW9ucyBjb3VsZCBiZSBkb25lIGZyb206IFwiJHttZXNzYWdlfVwiLiBUcnkgc29tZXRoaW5nIGVsc2UsIG9yIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlIHNwZWNpZmljIGFib3V0IHdoYXQgeW91J3JlIGRvaW5nLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gcHJvbXB0cyBleGlzdCBmb3IgdGhlIGN1cnJlbnQgcm9vbVxuICAgICAgX3RoaXMuRGlzcGxheS5zaG93KGA8cD4ke190aGlzLmdldFJvb20oX3RoaXMuUGxheWVyLmN1cnJlbnRSb29tKS5nZXRUZXh0fSBcbiAgICAgIDwvcD4gPHAgY2xhc3M9J2ZhaWxUZXh0Jz5UaGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYW55IGFjdGlvbnMgYXQgYWxsIHRoYXQgeW91IGNhbiBkbyBpbiB0aGlzIHJvb20uPC9wPlxuICAgICAgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZWZyZXNoRGlzcGxheSgpO1xuICB9XG5cbiAgZGlzYWJsZUlucHV0KCkge1xuICAgIHRoaXMuSW5wdXQuZGlzYWJsZSgpO1xuICB9XG5cbiAgZW5hYmxlSW5wdXQoKSB7XG4gICAgdGhpcy5JbnB1dC5lbmFibGUoKTtcbiAgfVxuXG4gIC8vIFBsYXllciB3aW5zXG4gIHdpbigpIHtcbiAgICAvLyBTaG93IGZpbmFsIHJvb20gdGV4dCAod2luIHRleHQpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvb21zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5yb29tc1tpXS5uYW1lID09PSB0aGlzLmVuZFJvb20pIHtcbiAgICAgICAgdGhpcy5EaXNwbGF5LmFwcGVuZCgnPHA+R2FtZSBlbmQuPC9wPicpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRGlzYWJsZSBhbnkgbW9yZSB1c2VyIGlucHV0IGFmdGVyIHdpbm5pbmdcbiAgICB0aGlzLmRpc2FibGVJbnB1dCgpO1xuICB9XG5cbiAgLy8gUGxheWVyIHJlc2V0cyBnYW1lXG4gIHJlc2V0R2FtZSgpIHtcbiAgICAvLyBSZXNldHMgcGxheWVyIHdpdGggYmxhbmsgaW52ZW50b3J5IGFuZCBiYWNrIHRvIHN0YXJ0aW5nIHJvb21cbiAgICB0aGlzLlBsYXllci5pbnZlbnRvcnkgPSBuZXcgSW52ZW50b3J5KCk7XG4gICAgdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSB0aGlzLnN0YXJ0Um9vbTtcbiAgICBjb25zdCByb29tID0gdGhpcy5nZXRSb29tKHRoaXMuc3RhcnRSb29tKTtcblxuICAgIHRoaXMuRGlzcGxheS5zaG93KHJvb20uZ2V0VGV4dCk7XG4gICAgdGhpcy5JbnB1dC5lbmFibGUoKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IEdhbWUgZnJvbSAnLi9nYW1lJztcblxuY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdhbWU7XG4iXSwic291cmNlUm9vdCI6IiJ9